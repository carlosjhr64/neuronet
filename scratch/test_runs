#!/usr/bin/env ruby
require 'colorize'
require 'help_parser'

OPTIONS = HelpParser['0.0.0', <<HELP]
Usage:
  test_runs [:options+] <file> <number=NUMBER>
Options:
  --max=NUMBER
  --show
Types:
  NUMBER   /^\\d+(\.\d+)?$/
# Example:
#   ./scratch/test_runs --max=100000 f6eee6 27 
HELP
HelpParser.float :number
HelpParser.int? :max

MAX = OPTIONS.max? || 50_000
FG = '%.1g'

FILE = Dir.glob('scratch/*.rb').detect{|file| File.basename(file, '.rb').include? OPTIONS.file}
unless FILE
  $stderr.puts "#{OPTIONS.file} did not match any files in ./scratch/*.rb"
  exit 64
end
require './'+FILE

NUMBER = OPTIONS.number

RANDOM_SEEDS = [
  '6871r19zb8oxtin0gguuz7duuy8qmttudv95eieqh4hkt7g1w9',
  'f49iaj2pifrkl7f48qntkedn0idovku140g5k2q0spo6ixbx0',
  '2lo81h0d908u23xnrpru3527q09r999dn99lep1yy7ep3jmd4w',
  '5mv0tiwfn55htz86lpnwuc9bmbh242vi7tsp76x6sv3mcysmhq',
 # None able to do:
 #'2ksyxjh75ve3bzg2xsqtfbps9ul1insg8oxeqyabxilnbu565n',
  '1yu96istldnam1s1zkf6q71niokun09fbrfbj5ubig1v3ne5g2',
 # None able to do:
 #'4s0ucq13mmu84q1ba3nho53ltg8i3w7c1x0wzqsmxd10jkxyap',
 # Only 0f6eee6 able to do:
 #'2xhmfq6cjyzkwh1nrjx7ccvk5ed9cmsyia2fpb2m9873hfjnyc',
  '231rxmw9bb36rmdev7q72216ohn07ydy3yqo60hmffammli5n',
  '3d2tkvfsm68akw1l6l28tza7w3vr3eqvosh2idt2f49m5eghkv',
  'km2ru42ehr183xlzvntlsoi00dvvjqd1653to9gx71hsrg3k3',
  'ehdbhbsdhhfpb82zw4h3u8jr0zdx1g6hxn2rpqzprqpg9ja0c',
  '5y8hf5g5730bfc2950ybt33ctga039r8kt45xumt7o963ywx84',
  '3wtdlm8bfl8bmvhwwdwxmrjkxhzua7bftzggui6i0sdft7myc1',
  '60ocaa8wxkk9w8af17x22u3wz3yh80b1ko1feg7wfhm0lk9a9h',
]

def rnd3
  (rand + rand + rand) - (rand + rand + rand)
end

def r100
  (100.0/3.0)*rnd3
end

def rv4
  [r100, r100, r100, r100]
end

def pair
  [rv4, rv4]
end

def random_pairs
  [pair, pair, pair, pair]
end

@break = false
Signal.trap('INT'){ @break = true }

scores = ''
running_hits, fails  = 0, 0
running_start, running_count  =  Time.now, 0

RANDOM_SEEDS.each do |seed|
  srand seed.to_i(36)
  input_target = random_pairs

  ff = Neuronet::NeoYinYang[4]
  ff.distribution.set input_target.flatten
  ff.number(NUMBER)

  start, count  =  Time.now, 0
  ff.pairs input_target do # while...
    count += 1
    running_count += 1
    print '.' if count % 2000 == 0
    break if @break
    break if input_target.all?{|input, target| target.map{|_|FG % _} == (ff*input).map{|_|FG % _}}
    count < MAX
  end
  time = Time.now - start

  puts
  fails += 1  unless count < MAX
  hits = input_target.count{|input, target| target.map{|_|FG % _} == (ff*input).map{|_|FG % _}}
  color = (hits < 2)? :red : (hits < 4)? :yellow : :green
  color = :cyan  if @break
  running_hits += hits
  scores << hits.to_s.colorize(color)

  if OPTIONS.show?
    puts "### Showing ###"
    input_target.each do |input, target|
      puts
      puts target.map{|_|FG % _}.join(' ')
      puts (ff*input).map{|_|FG % _}.join(' ')
    end
    puts
    puts "###############"
  end

  puts "Hits: #{hits}  Time: #{time.to_f.round(1)}  Count: #{count}".colorize(color)

  break if @break
end
total_time = Time.now - running_start


color = :green
if fails > 0
  color = :yellow
  if fails > 3
    color = :red
  end
end
color = :cyan  if @break

puts "### TOTALS #{FILE.colorize(:blue)} #{NUMBER.to_s.colorize(background: :light_yellow)} ###"
puts "Hits: #{running_hits}  Time: #{total_time.to_f.round(1)}  Count: #{running_count}  Fails: #{fails}".colorize(color)
puts scores
system "espeak 'Test runs done!'"
