#!/usr/bin/env ruby
require 'test/unit'
require 'neuronet'

class TestLayer < Test::Unit::TestCase
  include Neuronet

  def test_layer
    layer = Layer.new 3
    assert_equal 'a:0,b:0,c:0', layer.inspect

    yin = Layer.new 3
    layer.connect yin
    inspect = 'a:0|0+0*d+0*e+0*f,b:0|0+0*d+0*e+0*f,c:0|0+0*d+0*e+0*f'
    assert_equal inspect, layer.inspect
    assert_equal inspect, layer.partial.inspect
    assert_equal [0.0, 0.0, 0.0], layer.values

    Neuronet.noise = NO_NOISE
    layer.train([-1,0,1], 1.75) # 1.75 mju by trial and error
    layer.partial
    assert_equal [-1.0,0.0,1.0], layer.values.map{|f| f.round(14)}

    yang = Layer.new 3
    yang.connect layer
    assert_equal('g:0|0+0*a+0*b+0*c,h:0|0+0*a+0*b+0*c,i:0|0+0*a+0*b+0*c',
                 yang.inspect)

    # Restore
    Neuronet.noise = NOISE
    Neuron.label = 'a'
  end

  def test_set_values
    Neuron.label = 'x'

    layer = Layer.new 3
    assert_equal 'x:0,y:0,z:0', layer.inspect

    values = [1, 2, 3]
    layer.set(values)
    assert_equal 'x:1,y:2,z:3', layer.inspect
    assert_equal values, layer.values.map{ it.round(14) }

    # Restore
    Neuron.label = 'a'
  end

  def test_mirror
    Neuronet.format = '%.1g'

    output = Layer.new 3
    # Auto connects to another layer as the same size, and returns the newly
    # connected layer:
    input = output.connect
    assert_equal 'd:0,e:0,f:0', input.inspect

    output.mirror
    assert_equal 'a:0|-2+4*d+0*e+0*f,b:0|-2+0*d+4*e+0*f,c:0|-2+0*d+0*e+4*f',
                 output.inspect

    input.set([-1.0, 0.0, 1.0])
    output.partial
    assert_equal [-1.0, 0.0, 1.0], output.values.map{ it.round(14) }

    # Restore
    Neuron.label = 'a'
    Neuronet.format = FORMAT
  end

  def test_anti_mirror
    Neuronet.format = '%.1g'

    output = Layer.new 3
    # Auto connects to another layer as the same size, and returns the newly
    # connected layer:
    input = output.connect
    assert_equal 'd:0,e:0,f:0', input.inspect

    output.mirror(-1)
    assert_equal 'a:0|2+-4*d+0*e+0*f,b:0|2+0*d+-4*e+0*f,c:0|2+0*d+0*e+-4*f',
                 output.inspect

    input.set([-1.0, 0.0, 1.0])
    output.partial
    assert_equal [1.0, 0.0, -1.0], output.values.map{ it.round(14) }

    # Restore
    Neuron.label = 'a'
    Neuronet.format = FORMAT
  end

  def test_antithesis
    Neuronet.format = '%.1g'

    output = Layer.new 4
    input = output.connect(Layer.new 2)

    assert_equal 'a,b,c,d', output.to_s
    assert_equal 'e,f', input.to_s

    output.antithesis
    assert_equal 'a:0|-2+4*e+0*f,b:0|2+-4*e+0*f,c:0|-2+0*e+4*f,d:0|2+0*e+-4*f',
                 output.inspect

    input.set([1, -1])
    output.partial
    assert_equal [1.0, -1.0, -1.0, 1.0], output.values.map{ it.round(14) }

    # Restore
    Neuron.label = 'a'
    Neuronet.format = FORMAT
  end

  def test_synthesis
    Neuronet.format = '%.1g'

    output = Layer.new 2
    input = output.connect(Layer.new 4)

    assert_equal 'a,b', output.to_s
    assert_equal 'c,d,e,f', input.to_s

    output.synthesis
    assert_equal 'a:0|-2+2*c+2*d+0*e+0*f,b:0|-2+0*c+0*d+2*e+2*f', output.inspect

    input.set([1, -1, -1, 1])
    output.partial
    assert_equal [0.0, 0.0], output.values.map{ it.round(14) }

    input.set([1.0, 1.0, -1.0, -1.0])
    output.partial
    assert_equal [1.0, -1.0], output.values.map{ it.round(14) }

    # Restore
    Neuron.label = 'a'
    Neuronet.format = FORMAT
  end

  def test_average
    Neuronet.format = '%.1g'

    output = Layer.new 3
    input = output.connect(Layer.new 3)

    assert_equal 'a,b,c', output.to_s
    assert_equal 'd,e,f', input.to_s

    output.average
    assert_equal 'a:0|-2+1*d+1*e+1*f,b:0|-2+1*d+1*e+1*f,c:0|-2+1*d+1*e+1*f',
                 output.inspect

    input.set([-1.0, 0.0, 1.0])
    output.partial
    assert_equal [0.0, 0.0, 0.0], output.values.map{ it.round(14) }

    input.set([1.0, 0.0, 1.0])
    output.partial
    assert_equal [0.667, 0.667, 0.667], output.values.map{ it.round(3) }

    # Restore
    Neuron.label = 'a'
    Neuronet.format = FORMAT
  end
end
