#!/usr/bin/env ruby
require 'test/unit'
require 'colorize'
require 'neuronet'

class TestMarshal < Test::Unit::TestCase
  include Neuronet

  def r4
    4.times.sum { rand }
  end

  def test_really
    # Arbitrary layers:
    layers = (2 + r4).to_i.times.inject([]) { |a,i| a << (1+r4+r4+r4+r4).to_i }
    puts "Testing FF #{layers.inspect}".colorize(:green)
    ff0 = FeedForward.new(layers)

    # Arbitrary weights and biases:
    ff0.each do |layer|
      layer.each do |neuron|
        neuron.bias = r4 - r4
        neuron.connections.each do |connection|
          connection.weight = r4 - r4
        end
      end
    end

    # Arbitrary input values:
    values = ff0.first.map { r4 - r4 }
    puts "With input #{values.map{_1.round(4)}.inspect}".colorize(:green)

    # Target:
    target0 = ff0 * values

    # Verify Marshal works:
    dump = Marshal.dump(ff0)
    ff1 = Marshal.load(dump)
    target1 = ff1 * values
    assert_equal target0, target1
  end
end
