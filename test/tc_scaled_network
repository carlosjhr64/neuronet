#!/usr/bin/env ruby
require 'test/unit'
require 'colorize'
require 'neuronet'

class TestScaledNetwork < Test::Unit::TestCase
  include Neuronet

  def random
    100.0*((rand + rand + rand) - (rand + rand + rand))
  end

  def test_scaled_network
    # set up random input target pairs
    # srand '4uzt56815q3vd87b603e5u81x6935gdh6v74vpvi1lyw5cmsag'.to_i(36)
    # srand '3h3zwx3wjanlf0eo42e3woppdg0q31rt7q7gb9pv8mc1ogsmz6'.to_i(36)
    # srand '607dx5cg2lfh4f447jkwxh2xpw63wyrhdvgmzmvhhfajh5kcl6'.to_i(36)
    srand '15p18356yc4jb66ej1jfjrqbkdkqboms5bqwup4soeu5llekpr'.to_i(36)
    input_target = [
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
    ]

    # initialize network
    ff = ScaledNetwork.new [4, 4]
    ff.distribution.set input_target.flatten

    # quick center distribution check
    numbers = input_target.flatten
    sum = numbers.sum
    average = sum/numbers.length
    distribution = ff.distribution
    assert_equal average, distribution.center

    # quick check of input layer set
    first_input = input_target.first[0]
    ff.set first_input
    assert first_input.map(&:abs).max > 4.0 # very good chance
    mapped_input = distribution.mapped(first_input)
    assert mapped_input.map(&:abs).max < 4.0 # very good chance
    squashed_input = mapped_input.map{|_|SQUASH[_]}
    assert_equal squashed_input, ff[0].map(&:activation)

    fg = '%.2g'
    start, count, max = Time.now, 0, 100_000
    ff.pairs(input_target) do # while...
      count += 1
      break if count > max
      !input_target.all? do |input, target|
        target.map{|_|fg % _} == (ff*input).map{|_|fg % _}
      end
    end
    assert count < max

    puts "Time: #{Time.now - start}  Count: #{count}".colorize(:yellow)
    puts 'Inputs(%.1g):'
    pp input_target.map{|a|a[0].map{|_|fg % _}}
    puts 'Targets(%.1g):'
    pp input_target.map{|a|a[1].map{|_|fg % _}}
    puts 'Ouputs(%.1g):'
    pp input_target.map{|a|(ff*a[0]).map{|_|fg % _}}
    puts ':)'
  end

  def test_scaled_network_reset
    # just some networks with 12 inputs
    ff = ScaledNetwork.new [12, 4, 3], reset: true
    ff.set [1,2,3,4,5,6,7,8,9,10,11,12]
    assert_equal [1,2,3,4,5,6,7,8,9,10,11,12], ff.input.map{|_|_.round(14)}
    entrada = ff.entrada.map(&:value)
    assert_equal [-1.5,-1.2,-1.0,-0.7,-0.4,-0.1,0.1,0.4,0.7,1.0,1.2,1.5],
                 entrada.map{_1.round(1)}
  end
end
