#!/usr/bin/env ruby
require 'test/unit'
require 'neuronet'

class TestNeuron < Test::Unit::TestCase
  include Neuronet

  def test_neuron
    Node.label = 'a'
    neuron = Neuron.new
    assert_equal 'a:0|0', neuron.inspect
    assert_equal 'a', neuron.to_s
    assert_equal 0.0, neuron.value
    assert_equal 0.5, neuron.activation

    # bias is zero and there are no connection..
    assert_equal 0.0, neuron.partial
    assert_equal 0.0, neuron.update
    assert_equal 0.0, neuron.value
    assert_equal 0.5, neuron.activation

    Neuronet.noise = NO_NOISE
    assert_equal neuron, neuron.backpropagate(1.0)
    assert_equal 'a:0|1', neuron.inspect
    assert_equal 1.0, neuron.update
    assert_equal 'a:1|1', neuron.inspect
    Neuronet.noise = NOISE # Restore

    ###      :b         connect :c
    neuron = Neuron.new.connect Node.new
    assert_equal 'b:0|0+0*c', neuron.inspect
    assert_equal 'b', neuron.to_s
  end
end
