#! ruby
require 'test/unit'
require 'colorize'
require 'neuronet'
include Neuronet

class TestBlessing < Test::Unit::TestCase
  def random
    100.0*((rand + rand + rand) - (rand + rand + rand))
  end

  def test_tao
    # set up random input target pairs
    srand '5inbyuq1667xysxq25twpzrvcrwyyb6jt7twwn14lfxsiek4cs'.to_i(36)
    input_target = [
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
    ]

    # initialize network
    Neuronet.format = '%.3g'
    Node.label = 'a'
    ff = Tao[4]
    puts ff.colorize

    # A 3X4 network
    assert_equal 3, ff.length
    assert ff.all?{|layer| layer.length == 4}

    # yin connected to entrada
    inspected = [ # e,f,g,h X a,b,c,d =>
      'e:0|0+0*a+0*b+0*c+0*d',
      'f:0|0+0*a+0*b+0*c+0*d',
      'g:0|0+0*a+0*b+0*c+0*d',
      'h:0|0+0*a+0*b+0*c+0*d',
    ].join(',')
    assert_equal inspected, ff.yin.inspect

    # salida connected to yin and entrada
    inspected = [ # i,j,k,l X e,f,g,h,a,b,c,d =>
      'i:0|0+0*e+0*f+0*g+0*h+0*a+0*b+0*c+0*d',
      'j:0|0+0*e+0*f+0*g+0*h+0*a+0*b+0*c+0*d',
      'k:0|0+0*e+0*f+0*g+0*h+0*a+0*b+0*c+0*d',
      'l:0|0+0*e+0*f+0*g+0*h+0*a+0*b+0*c+0*d',
    ].join(',')
    assert_equal inspected, ff.salida.inspect

    ff.distribution.set input_target.flatten

    start, count  =  Time.now, 0
    ff.pairs input_target do # while...
      count += 1
      break if count > 10_000
      not input_target.all?{|input, target| target.map{|_|'%.2g' % _} == (ff*input).map{|_|'%.2g' % _}}
    end
    puts ff.colorize
    assert count < 10_000

    puts "Time: #{Time.now - start}  Count: #{count}"
    puts "Inputs(%.2g):"
    pp input_target.map{|a|a[0].map{|_|'%.2g' % _}}
    puts "Targets(%.2g):"
    pp input_target.map{|a|a[1].map{|_|'%.2g' % _}}
    puts "Ouputs(%.2g):"
    pp input_target.map{|a|(ff*a[0]).map{|_|'%.2g' % _}}
    puts ":)"
  end

  def test_taoyinyang
    # set up random input target pairs
    srand '4wf5jh5nhps2zfn6l6si4e3mk7dtb5j9ss0urd7vh0s13mvdq7'.to_i(36)
    input_target = [
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
    ]

    # initialize network
    Neuronet.format = '%.3g'
    Node.label = 'a'
    ff = TaoYinYang[4]
    puts ff.colorize

    # A 3X4 network
    assert_equal 3, ff.length
    assert ff.all?{|layer| layer.length == 4}

    # yin mirrors entrada
    inspected = [ 
      # e,f,g,h X a,b,c,d =>
      'e:0|-2.16+4.33*a+0*b+0*c+0*d',
      'f:0|-2.16+0*a+4.33*b+0*c+0*d',
      'g:0|-2.16+0*a+0*b+4.33*c+0*d',
      'h:0|-2.16+0*a+0*b+0*c+4.33*d',
    ].join(',')
    assert_equal inspected, ff.yin.inspect

    # salida mirrors yang and conected to entrada
    inspected = [
      # i,j,k,l X e,f,g,h,a,b,c,d =>
      'i:0|-2.16+4.33*e+0*f+0*g+0*h+0*a+0*b+0*c+0*d',
      'j:0|-2.16+0*e+4.33*f+0*g+0*h+0*a+0*b+0*c+0*d',
      'k:0|-2.16+0*e+0*f+4.33*g+0*h+0*a+0*b+0*c+0*d',
      'l:0|-2.16+0*e+0*f+0*g+4.33*h+0*a+0*b+0*c+0*d',
    ].join(',')
    assert_equal inspected, ff.salida.inspect

    ff.distribution.set input_target.flatten

    start, count  =  Time.now, 0
    ff.pairs input_target do # while...
      count += 1
      break if count > 10_000
      not input_target.all?{|input, target| target.map{|_|'%.2g' % _} == (ff*input).map{|_|'%.2g' % _}}
    end
    puts ff.colorize
    assert count < 10_000

    puts "Time: #{Time.now - start}  Count: #{count}"
    puts "Inputs(%.2g):"
    pp input_target.map{|a|a[0].map{|_|'%.2g' % _}}
    puts "Targets(%.2g):"
    pp input_target.map{|a|a[1].map{|_|'%.2g' % _}}
    puts "Ouputs(%.2g):"
    pp input_target.map{|a|(ff*a[0]).map{|_|'%.2g' % _}}
    puts ":)"
  end

  def test_neoyinyang
    # set up random input target pairs
    srand '5f70525vvv119egnuj2361dwknkw5b1h64rbhz8r2yuunleec9'.to_i(36)
    #srand '5db2avuse31mmorp9hs622wfr0063ll3xkev6zb397xhu0gl9t'.to_i(36)
    #srand '3kv1opxkgpncte7fp0xr03lh7ohz6cewq5qp5dfeyivmvyv6h8'.to_i(36)
    input_target = [
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
      [[random, random, random, random], [random, random, random, random]],
    ]

    # initialize network
    Neuronet.format = '%.3g'
    Node.label = 'a'
    ff = NeoYinYang[4]
    puts ff.colorize

    # A 4X4 network
    assert_equal 4, ff.length
    assert ff.all?{|layer| layer.length == 4}

    # yin mirrors entrada
    inspected = [
      # e,f,g,h X a,b,c,d =>
      'e:0|-2.16+4.33*a+0*b+0*c+0*d',
      'f:0|-2.16+0*a+4.33*b+0*c+0*d',
      'g:0|-2.16+0*a+0*b+4.33*c+0*d',
      'h:0|-2.16+0*a+0*b+0*c+4.33*d',
    ].join(',')
    assert_equal inspected, ff.yin.inspect

    # yang mirrors ying
    inspected = [
      # e,f,g,h X a,b,c,d =>
      'i:0|-2.16+4.33*e+0*f+0*g+0*h',
      'j:0|-2.16+0*e+4.33*f+0*g+0*h',
      'k:0|-2.16+0*e+0*f+4.33*g+0*h',
      'l:0|-2.16+0*e+0*f+0*g+4.33*h',
    ].join(',')
    assert_equal inspected, ff.yang.inspect

    # salida mirrors yang
    inspected = [
      # e,f,g,h X a,b,c,d =>
      'm:0|-2.16+4.33*i+0*j+0*k+0*l',
      'n:0|-2.16+0*i+4.33*j+0*k+0*l',
      'o:0|-2.16+0*i+0*j+4.33*k+0*l',
      'p:0|-2.16+0*i+0*j+0*k+4.33*l',
    ].join(',')
    assert_equal inspected, ff.salida.inspect

    ff.distribution.set input_target.flatten
    ff.number 26 # TODO: review mu stuff

    fg = '%.1g'
    start, count, max  =  Time.now, 0, 100_000
    ff.pairs input_target do # while...
      count += 1
      break if count > max
      not input_target.all?{|input, target| target.map{|_|fg % _} == (ff*input).map{|_|fg % _}}
    end
    puts ff.colorize
    puts ff.inspect

    puts "Time: #{Time.now - start}  Count: #{count}".colorize :yellow
    puts "Inputs:"
    pp input_target.map{|a|a[0].map{|_|fg % _}}
    puts "Targets:"
    pp input_target.map{|a|a[1].map{|_|fg % _}}
    puts "Ouputs:"
    pp input_target.map{|a|(ff*a[0]).map{|_|fg % _}}

    assert count < max
    puts ":)"
  end

  def test_brahmasynthesis
    # set up random input target pairs
    srand '3qwqmo1uj7fbzegcbh9efepraekc4m2e30n4urvwbf8o4rrclc'.to_i(36)
    input_target = [
      [[random, random, random], [random, random, random]],
      [[random, random, random], [random, random, random]],
      [[random, random, random], [random, random, random]],
      [[random, random, random], [random, random, random]],
    ]

    # initialize network
    Neuronet.format = '%.1g'
    Node.label = 'a'
    ff = BrahmaSynthesis[3]
    puts ff.colorize

    # A 3,6,3 network
    assert_equal 3, ff.entrada.length
    assert_equal 6, ff.yin.length
    assert_equal 3, ff.salida.length

    # yin mirrors and shadows entrada
    inspected = [
      # d,e,f, g,h,i X a,b,c =>
      'd:0|-2+4*a+0*b+0*c',
      'e:0|2+-4*a+0*b+0*c',
      'f:0|-2+0*a+4*b+0*c',
      'g:0|2+0*a+-4*b+0*c',
      'h:0|-2+0*a+0*b+4*c',
      'i:0|2+0*a+0*b+-4*c',
    ].join(',')
    assert_equal inspected, ff.yin.inspect

    # salida synthesis
    inspected = [
      'j:0|-2+2*d+2*e+0*f+0*g+0*h+0*i',
      'k:0|-2+0*d+0*e+2*f+2*g+0*h+0*i',
      'l:0|-2+0*d+0*e+0*f+0*g+2*h+2*i'
    ].join(',')
    assert_equal inspected, ff.salida.inspect

    ff.distribution.set input_target.flatten
    ff.number 2

    start, count, max  =  Time.now, 0, 10_000
    ff.pairs input_target do # while...
      count += 1
      break if count > max
      not input_target.all?{|input, target| target.map{|_|'%.2g' % _} == (ff*input).map{|_|'%.2g' % _}}
    end
    puts ff.colorize

    puts "Time: #{Time.now - start}  Count: #{count}"
    puts "Inputs(%.2g):"
    pp input_target.map{|a|a[0].map{|_|'%.2g' % _}}
    puts "Targets(%.2g):"
    pp input_target.map{|a|a[1].map{|_|'%.2g' % _}}
    puts "Ouputs(%.2g):"
    pp input_target.map{|a|(ff*a[0]).map{|_|'%.2g' % _}}

    assert count < max
    puts ":)"
  end

  def test_combos
    # just some quickies
    Neuronet.format = '%.1g'

    Node.label = 'a'
    ff = YinYang[1]
    assert_equal "#Yin #Yang #distribution:Gaussian #reset:false #learning:0.5\na:0\nb:0|-2+4*a\nc:0|-2+4*b", ff.inspect
  end
end
