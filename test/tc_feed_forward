#!/usr/bin/env ruby
require 'test/unit'
require 'neuronet'

srand '69icytmdeyhxqz3oq50imaduuxupq2u7ie1r30dbsihnrtv8mw'.to_i(36)

class TestFeedForward < Test::Unit::TestCase
  include Neuronet

  def random
    (rand + rand + rand) - (rand + rand + rand)
  end

  def test_feed_forward_new
    ff = FeedForward.new([5,3])
    assert_equal 2, ff.length, 'Two layers'
    # in
    assert_equal 5, ff[0].length,   'Input layer has 5 nodes'
    assert_equal ff[0], ff.entrada, 'Input layer refereced as in'
    # yin
    assert_equal 3, ff[1].length, 'layer[1] has 3 neurons'
    assert_equal ff.yin, ff[1],   'layer[1] referenced as yin'
    # yang
    assert_equal 5, ff[-2].length, 'layer[-2] has 5 neurons'
    assert_equal ff.yang, ff[-2],  'layer[-2] referenced as yang'
    # out
    assert_equal 3, ff[-1].length,  'layer[-1] has 1 neuron'
    assert_equal ff.salida, ff[-1], 'layer[-2] referenced as out'

    ff = FeedForward.new([9,6,3,1])
    assert_equal 4, ff.length, 'Four layers'
    # in
    assert_equal 9, ff[0].length,   'Input layer has 9 nodes'
    assert_equal ff[0], ff.entrada, 'Input layer refereced as in'
    # yin
    assert_equal 6, ff[1].length, 'layer[1] has 6 neurons'
    assert_equal ff.yin, ff[1],   'layer[1] referenced as yin'
    # yang
    assert_equal 3, ff[-2].length, 'layer[-2] has 3 neurons'
    assert_equal ff.yang, ff[-2],  'layer[-2] referenced as yang'
    # out
    assert_equal 1, ff[-1].length,  'layer[-1] has 1 neuron'
    assert_equal ff.salida, ff[-1], 'layer[-2] referenced as out'

    Neuron.label = 'a' # restore
  end

  def test_feed_forward_setters
    ff = FeedForward.new([3,2,1])
    assert_equal [0.0,0.0,0.0], ff.input
    ff.set [1.23, 2.13, -0.654]
    assert_equal [1.23, 2.13, -0.654], ff.input.map{|x| x.round(14)}

    Neuron.label = 'a' # restore
  end

  def test_feed_forward_training
    ff = FeedForward.new([3,3,3])
    input = [random, random, random]
    target = [random, random, random]
    ff.set(input)
    mju = ff.expected_mju
    31.times{ff.update.train(target, mju)}
    output = ff*input
    # 3g good? :)
    target = target.map{|x|'%.3g'%x}.join(',')
    output = output.map{|x|'%.3g'%x}.join(',')
    assert_equal target, output
    # test ff.output
    assert_equal target, ff.output.map{|x|'%.3g'%x}.join(',')

    Neuron.label = 'a' # restore
  end

  def test_feed_forward_inspect
    inspect = <<~INSPECT.chomp
      a:0,b:0,c:0,d:0
      e:0|0+0*a+0*b+0*c+0*d,f:0|0+0*a+0*b+0*c+0*d,g:0|0+0*a+0*b+0*c+0*d
      h:0|0+0*e+0*f+0*g,i:0|0+0*e+0*f+0*g
    INSPECT
    string = <<~STRING.chomp
      a,b,c,d
      e,f,g
      h,i
    STRING
    ff = FeedForward.new [4,3,2]
    assert_equal inspect, ff.inspect
    assert_equal string, ff.to_s

    Neuron.label = 'a' # restore
  end

  def test_feed_forward_pairs
    ff = FeedForward.new [3,3,3]
    input_target = [
      [[random, random, random], [random, random, random]],
      [[random, random, random], [random, random, random]],
      [[random, random, random], [random, random, random]],
      [[random, random, random], [random, random, random]],
    ]
    mju = ff.expected_mju
    ff.pairs(input_target, mju) do # while...
      !input_target.all? do |input, target|
        target.map{|_|'%.2g' % _} == (ff*input).map{|_|'%.2g' % _}
      end
    end
    assert(input_target.all? do |input, target|
      target.map{|_|'%.2g' % _} == (ff*input).map{|_|'%.2g' % _}
    end)

    Neuron.label = 'a' # restore
  end

  def test_expected_mju
    ff = FeedForward.new [32,64,16,1]
    mju = ff.expected_mju
    m0 = 1.0 + (0.5 * 16.0)
    m1 = 1.0 + (0.5 * 64.0)
    m2 = 1.0 + (0.5 * 32.0)
    mju0 = 1.0
    mju1 = Math.sqrt(16.0)/4.0
    mju2 = Math.sqrt(64.0)/4.0
    expected = mju0*m0 + mju0*mju1*m1 + mju0*mju1*mju2*m2
    assert_equal expected, mju

    Neuron.label = 'a' # restore
  end
end
