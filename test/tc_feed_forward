#!/usr/bin/env ruby
require 'test/unit'
require 'neuronet'
include Neuronet
srand '69icytmdeyhxqz3oq50imaduuxupq2u7ie1r30dbsihnrtv8mw'.to_i(36)

class TestFeedForward < Test::Unit::TestCase
  def random
    (rand + rand + rand) - (rand + rand + rand)
  end

  def test_feed_forward_new
    ff = FeedForward.new([5,3])
    assert_equal 2, ff.length,     'Two layers'
    assert_equal 1.0, ff.learning, 'Default learning for 2 layers'
    # in
    assert_equal 5, ff[0].length,   'Input layer has 5 nodes'
    assert_equal ff[0], ff.entrada, 'Input layer refereced as in'
    # yin
    assert_equal 3, ff[1].length,  'layer[1] has 3 neurons'
    assert_equal ff.yin, ff[1],    'layer[1] referenced as yin'
    # yang
    assert_equal 5, ff[-2].length, 'layer[-2] has 5 neurons'
    assert_equal ff.yang, ff[-2],  'layer[-2] referenced as yang'
    # out
    assert_equal 3, ff[-1].length,  'layer[-1] has 1 neuron'
    assert_equal ff.salida, ff[-1], 'layer[-2] referenced as out'

    ff = FeedForward.new([9,6,3,1])
    assert_equal 4, ff.length, 'Four layers'
    assert_equal 1.0/3.0, ff.learning, 'Default learning for 4 layers'
    # in
    assert_equal 9, ff[0].length,   'Input layer has 9 nodes'
    assert_equal ff[0], ff.entrada, 'Input layer refereced as in'
    # yin
    assert_equal 6, ff[1].length,  'layer[1] has 6 neurons'
    assert_equal ff.yin, ff[1],    'layer[1] referenced as yin'
    # yang
    assert_equal 3, ff[-2].length, 'layer[-2] has 3 neurons'
    assert_equal ff.yang, ff[-2],  'layer[-2] referenced as yang'
    # out
    assert_equal 1, ff[-1].length,  'layer[-1] has 1 neuron'
    assert_equal ff.salida, ff[-1], 'layer[-2] referenced as out'
  end

  def test_feed_forward_setters
    ff = FeedForward.new([3,2,1])
    ff.learning = 0.7
    assert_equal 0.7, ff.learning
    ff.number(4) # learning = 1/(sqrt(4)(3-1)) #=> 1/4
    assert_equal 0.25, ff.learning
    assert_equal [0.0,0.0,0.0], ff.input
    ff.set [1.23, 2.13, -0.654]
    assert_equal [1.23, 2.13, -0.654], ff.input.map{|x| x.round(15)}
  end

  def test_feed_forward_training
    ff = FeedForward.new([3,3,3])
    input = [random, random, random]
    target = [random, random, random]
    ff.set(input)
    32.times{ff.update.train(target)}
    output = ff*input
    # I'm pretty sure it's 3g good... :)
    target = target.map{|x|"%.3g"%x}.join(',')
    output = output.map{|x|"%.3g"%x}.join(',')
    assert_equal target, output
  end

  def test_feed_forward_inspect
    inspect = <<-INSPECT.chomp
#learning:0.5
a:0,b:0,c:0,d:0
e:0|0+0*a+0*b+0*c+0*d,f:0|0+0*a+0*b+0*c+0*d,g:0|0+0*a+0*b+0*c+0*d
h:0|0+0*e+0*f+0*g,i:0|0+0*e+0*f+0*g
    INSPECT
    string = <<-STRING.chomp
a,b,c,d
e,f,g
h,i
    STRING
    ff = FeedForward.new [4,3,2]
    assert_equal inspect, ff.inspect
    assert_equal string, ff.to_s
  end

  def test_feed_forward_pairs
    ff = FeedForward.new [3,3,3]
    input_target = [
      [[random, random, random], [random, random, random]],
      [[random, random, random], [random, random, random]],
      [[random, random, random], [random, random, random]],
      [[random, random, random], [random, random, random]],
    ]
    ff.pairs(input_target) do # while...
      not input_target.all?{|input, target| target.map{|_|'%.2g' % _} == (ff*input).map{|_|'%.2g' % _}}
    end
    assert input_target.all?{|input, target| target.map{|_|'%.2g' % _} == (ff*input).map{|_|'%.2g' % _}}
  end
end
